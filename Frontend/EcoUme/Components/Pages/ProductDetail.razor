@page "/product-detail/{ListingId:int}"
@using DTOs
@using EcoUme.Services
@inject IListingsService ListingService
@inject IUsersService UsersService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject TokenStorageService TokenStorageService

<h1 class="mb-4 text-center">Product Details</h1>

@if (Listing == null)
{
    <div class="alert alert-danger text-center">Could not load product details. Please try again later.</div>
}
else
{
    <div class="card mx-auto product-card">
        <div class="row g-0">
            <!-- Left Section: Image and Price -->
            <div class="col-lg-6 col-md-6 text-center d-flex flex-column justify-content-center align-items-center p-4 image-container">
                @if (!string.IsNullOrEmpty(ImageUrl))
                {
                    <img src="@ImageUrl"
                         alt="Product Image"
                         class="img-fluid rounded shadow product-image" />
                }
                else
                {
                    <div class="no-image-placeholder">
                        <span>No Image Available</span>
                    </div>
                }

                <div class="mt-3">
                    <button class="btn btn-primary btn-lg price-tag">
                        DKK @Listing.Price
                    </button>
                </div>
            </div>

            <!-- Right Section: Details -->
            <div class="col-lg-6 col-md-6 details-container">
                <div class="card-body">
                    <h4 class="card-title">@Listing.ProductName</h4>
                    <p class="card-text description">@Listing.Description</p>
                    <ul class="list-group list-group-flush product-info">
                        <li class="list-group-item"><strong>Category:</strong> @Listing.Category</li>
                        <li class="list-group-item"><strong>Condition:</strong> @Listing.Condition</li>
                        <li class="list-group-item"><strong>Quantity:</strong> @Listing.Quantity</li>
                        <li class="list-group-item"><strong>Seller Name:</strong> @(!string.IsNullOrEmpty(SellerName) ? SellerName : "Unknown Seller")</li>
                    </ul>

                    <!-- Contact Seller Button -->
                    <div class="card-footer text-center mt-3">
                        <button class="btn btn-success" @onclick="NavigateToChat">
                            Contact Seller
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="mt-4 text-center">
    <button class="btn btn-secondary" @onclick="NavigateBack">Back to Listings</button>
</div>

@code {
    [Parameter]
    public int ListingId { get; set; }

    private ListingDto Listing = new(); // Initialize to avoid nullable warnings
    private string? ImageUrl; // Base64-encoded image URL or fallback text
    private string? SellerName; // Seller's name fetched from the User Microservice

    protected override async Task OnInitializedAsync()
    {
        await LoadListing();
        await FetchSellerName();
    }

    private async Task LoadListing()
    {
        try
        {
            var fetchedListing = await ListingService.GetListingByIdAsync(ListingId);
            if (fetchedListing != null)
            {
                Listing = fetchedListing;

                if (!string.IsNullOrEmpty(Listing.ImageUrl))
                {
                    // Securely fetch the image URL
                    var fileUrl = $"{Configuration["ApiBaseUrl"]}api/listings/files/{Path.GetFileName(Listing.ImageUrl)}";
                    ImageUrl = await GetAuthorizedImageUrl(fileUrl);
                }
            }
            else
            {
                Console.WriteLine("Listing not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product details: {ex.Message}");
        }
    }

    private async Task FetchSellerName()
    {
        try
        {
            if (Listing.SellerId > 0)
            {
                var user = await UsersService.GetUserByIdAsync(Listing.SellerId);
                SellerName = user?.Username ?? "Unknown Seller";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching seller name: {ex.Message}");
            SellerName = "Unknown Seller";
        }
    }

    private async Task<string> GetAuthorizedImageUrl(string fileUrl)
    {
        var token = await TokenStorageService.GetTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            throw new UnauthorizedAccessException("User is not authenticated.");
        }

        using var client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        try
        {
            var imageBytes = await client.GetByteArrayAsync(fileUrl);
            return $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load image: {ex.Message}");
            return string.Empty;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/"); // Navigate to listings management page
    }

    private void NavigateToChat()
    {
        if (Listing.SellerId > 0)
        {
            NavigationManager.NavigateTo($"/chat/{Listing.SellerId}");
        }
    }

}