@using DTOs
@using EcoUme.Services
@inject IListingsService ListingService
@inject TokenStorageService TokenStorageService
@inject HttpClient Http

@if (_isVisible)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Listing</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="_listing" OnValidSubmit="SaveListing">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="ProductName">Product Name</label>
                            <InputText id="ProductName" class="form-control" @bind-Value="_listing.ProductName" />
                            <ValidationMessage For="@(() => _listing.ProductName)" />
                        </div>
                        <div class="mb-3">
                            <label for="Price">Price</label>
                            <InputNumber id="Price" class="form-control" @bind-Value="_listing.Price" />
                            <ValidationMessage For="@(() => _listing.Price)" />
                        </div>
                        <div class="mb-3">
                            <label for="Quantity">Quantity</label>
                            <InputNumber id="Quantity" class="form-control" @bind-Value="_listing.Quantity" />
                            <ValidationMessage For="@(() => _listing.Quantity)" />
                        </div>
                        <div class="mb-3">
                            <label for="Category">Category:</label>
                            <select id="Category" class="form-control" @bind="_listing.Category">
                                <option value="">Select Category</option>
                                @foreach (var category in categories)
                                {
                                <option value="@category">@category</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => _listing.Category)" />
                        </div>
                        <div class="mb-3">
                            <label for="Condition">Condition:</label>
                            <select id="Condition" class="form-control" @bind="_listing.Condition">
                                <option value="">Select Condition</option>
                                @foreach (var condition in conditions)
                                {
                                <option value="@condition">@condition</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => _listing.Condition)" />
                        </div>
                        <div class="mb-3">
                            <label for="Description">Description</label>
                            <InputTextArea id="Description" class="form-control" @bind-Value="_listing.Description" />
                            <ValidationMessage For="@(() => _listing.Description)" />
                        </div>
                        <div class="mb-3">
                            <label for="ImageFile">Upload Image</label>
                            <InputFile OnChange="OnImageSelected" />
                            <ValidationMessage For="@(() => _uploadedImage)" />
                        </div>
                        @if (!string.IsNullOrEmpty(_listing.ImageUrl))
                        {
                            <div class="mb-3">
                                <label>Current Image:</label>
                                <img src="api/listings/files/@_listing.ImageUrl" alt="Listing Image" class="img-fluid" />
                            </div>
                        }

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteListing">Delete</button>
                        <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _isVisible = false;
    private UpdateListingRequest _listing = new();
    private IBrowserFile? _uploadedImage;
    private List<string> categories = new(); 
    private List<string> conditions = new(); 
    [Parameter] public EventCallback OnSaved { get; set; }

    public async Task Show(ListingDto listing)
    {
        var currentUser = await TokenStorageService.GetCurrentUserAsync();
        if (currentUser == null || currentUser.UserID != listing.SellerId)
        {
            Console.WriteLine("User is not authorized to edit this listing.");
            return;
        }

        _listing = new UpdateListingRequest
        {
            ListingId = listing.ListingID,
            ProductName = listing.ProductName,
            Price = listing.Price,
            Quantity = listing.Quantity,
            Category = listing.Category,
            Condition = listing.Condition,
            Description = listing.Description,
            ImageUrl = listing.ImageUrl
        };
        
        await LoadCategoriesAndConditions();
        
        _isVisible = true;
        StateHasChanged();
    }
    
    private async Task LoadCategoriesAndConditions()
    {
        try
        {
            // Fetch categories from the API
            var categoryResponse = await Http.GetFromJsonAsync<List<EnumResponseDTO>>("http://localhost:7202/api/listings/product-categories");

            if (categoryResponse != null)
            {
                categories = categoryResponse.Select(c => c.Name).ToList();
                Console.WriteLine($"Loaded categories: {string.Join(", ", categories)}");
            }
            else
            {
                Console.WriteLine("No categories found.");
            }

            // Fetch conditions from the API
            var conditionResponse = await Http.GetFromJsonAsync<List<EnumResponseDTO>>("http://localhost:7202/api/listings/product-conditions");

            if (conditionResponse != null)
            {
                conditions = conditionResponse.Select(c => c.Name).ToList();
                Console.WriteLine($"Loaded categories: {string.Join(", ", categories)}");
            }
            else
            {
                Console.WriteLine("No categories found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories and conditions: {ex.Message}");
        }
    }

    private void Close()
    {
        _isVisible = false;
        StateHasChanged();
    }

    private async Task SaveListing()
    {
        try
        {
            if (_uploadedImage != null)
            {
                var imageUrl = await ListingService.UploadFileAsync(_uploadedImage);
                _listing.ImageUrl = imageUrl;
            }

            await ListingService.UpdateListingAsync(_listing.ListingId, _listing);

            Console.WriteLine("Listing updated successfully.");
            if (OnSaved.HasDelegate)
            {
                await OnSaved.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating listing: {ex.Message}");
        }
        finally
        {
            _isVisible = false;
        }
    }
    
    private async Task DeleteListing()
    {
        try
        {
            // Call the service to delete the listing
            await ListingService.DeleteListingAsync(_listing.ListingId);

            Console.WriteLine("Listing deleted successfully.");
        
            // Invoke the saved event to reload listings
            if (OnSaved.HasDelegate)
            {
                await OnSaved.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting listing: {ex.Message}");
        }
        finally
        {
            _isVisible = false; // Close the modal
        }
    }


    private Task OnImageSelected(InputFileChangeEventArgs e)
    {
        _uploadedImage = e.File;
        Console.WriteLine($"Image selected: {_uploadedImage?.Name}");
        return Task.CompletedTask;
    }
}